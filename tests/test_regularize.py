from uf3.regression.regularize import *


class TestRegularizers:
    def test_ridge_penalty_matrix(self):
        m = get_ridge_penalty_matrix(5)
        ref = np.array([[1, 0, 0, 0, 0],
                        [0, 1, 0, 0, 0],
                        [0, 0, 1, 0, 0],
                        [0, 0, 0, 1, 0],
                        [0, 0, 0, 0, 1]])
        assert np.all(m == ref)

    def test_get_curvature_penalty_matrix_1D(self):
        m = get_curvature_penalty_matrix_1D(5)
        ref = np.array([[-1, 1, 0, 0, 0 ],
                        [1, -2, 1, 0, 0],
                        [0, 1, -2, 1, 0],
                        [0, 0, 1, -2, 1],
                        [0, 0, 0, 1,  -1]])
        assert np.all(m == ref)

    def test_get_curvature_penalty_matrix_2D(self):
        m = get_curvature_penalty_matrix_2D(4, 4, flatten=False)
        ref = np.array([
            # (i, j) = (0, 0)
            [[-2, 1, 0, 0],
              [1, 0, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 0]],
            # (i, j) = (0, 1)
            [[1, -3, 1, 0],
             [0, 1, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0]],
            # (i, j) = (0, 2)
            [[0, 1, -3, 1],
             [0, 0, 1, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0]],
            # (i, j) = (0, 3)
            [[0, 0, 1, -2],
             [0, 0, 0, 1],
             [0, 0, 0, 0],
             [0, 0, 0, 0]],

            # (i, j) = (1, 0)
            [[1, 0, 0, 0],
             [-3, 1, 0, 0],
             [1, 0, 0, 0],
             [0, 0, 0, 0]],
            # (i, j) = (1, 1)
            [[0, 1, 0, 0],
             [1, -4, 1, 0],
             [0, 1, 0, 0],
             [0, 0, 0, 0]],
            # (i, j) = (1, 2)
            [[0, 0, 1, 0],
             [0, 1, -4, 1],
             [0, 0, 1, 0],
             [0, 0, 0, 0]],
            # (i, j) = (1, 3)
            [[0, 0, 0, 1],
             [0, 0, 1, -3],
             [0, 0, 0, 1],
             [0, 0, 0, 0]],

            # (i, j) = (2, 0)
            [[0, 0, 0, 0],
             [1, 0, 0, 0],
             [-3, 1, 0, 0],
             [1, 0, 0, 0]],
            # (i, j) = (2, 1)
            [[0, 0, 0, 0],
             [0, 1, 0, 0],
             [1, -4, 1, 0],
             [0, 1, 0, 0]],
            # (i, j) = (2, 2)
            [[0, 0, 0, 0],
             [0, 0, 1, 0],
             [0, 1, -4, 1],
             [0, 0, 1, 0]],
            # (i, j) = (2, 3)
            [[0, 0, 0, 0],
             [0, 0, 0, 1],
             [0, 0, 1, -3],
             [0, 0, 0, 1]],

            # (i, j) = (3, 0)
            [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [1, 0, 0, 0],
             [-2, 1, 0, 0]],
            # (i, j) = (3, 1)
            [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 1, 0, 0],
             [1, -3, 1, 0]],
            # (i, j) = (3, 2)
            [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 1, 0],
             [0, 1, -3, 1]],
            # (i, j) = (3, 3)
            [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 1],
             [0, 0, 1, -2]],
        ])
        assert np.all(m == ref)

    def test_get_curvature_penalty_matrix_3D(self):
        m = get_curvature_penalty_matrix_3D(3, 3, 3, flatten=False)
        ref = np.array([
            [  # (i, j, k) = (0, 0, 0)
                [[-3, 1, 0],
                [1, 0, 0],
                [0, 0, 0]],

                [[1, 0, 0],
                [0, 0, 0],
                [0, 0, 0]],

                [[0, 0, 0],
                [0, 0, 0],
                [0, 0, 0]],
            ],
            [  # (i, j, k) = (0, 0, 1)
                [[1, -4, 1],
                 [0, 1, 0],
                 [0, 0, 0]],

                [[0, 1, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (0, 0, 2)
                [[0, 1, -3],
                 [0, 0, 1],
                 [0, 0, 0]],

                [[0, 0, 1],
                 [0, 0, 0],
                 [0, 0, 0]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            #===================================================================
            [  # (i, j, k) = (0, 1, 0)
                [[1, 0, 0],
                 [-4, 1, 0],
                 [1, 0, 0]],

                [[0, 0, 0],
                 [1, 0, 0],
                 [0, 0, 0]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (0, 1, 1)
                [[0, 1, 0],
                 [1, -5, 1],
                 [0, 1, 0]],

                [[0, 0, 0],
                 [0, 1, 0],
                 [0, 0, 0]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (0, 1, 2)
                [[0, 0, 1],
                 [0, 1, -4],
                 [0, 0, 1]],

                [[0, 0, 0],
                 [0, 0, 1],
                 [0, 0, 0]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            #===================================================================
            [  # (i, j, k) = (0, 2, 0)
                [[0, 0, 0],
                 [1, 0, 0],
                 [-3, 1, 0]],

                [[0, 0, 0],
                 [0, 0, 0],
                 [1, 0, 0]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (0, 2, 1)
                [[0, 0, 0],
                 [0, 1, 0],
                 [1, -4, 1]],

                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 1, 0]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (0, 2, 2)
                [[0, 0, 0],
                 [0, 0, 1],
                 [0, 1, -3]],

                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 1]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            #===================================================================
            #===================================================================
            [  # (i, j, k) = (1, 0, 0)
                [[1, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[-4, 1, 0],
                 [1, 0, 0],
                 [0, 0, 0]],
    
                [[1, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (1, 0, 1)
                [[0, 1, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[1, -5, 1],
                 [0, 1, 0],
                 [0, 0, 0]],
    
                [[0, 1, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (1, 0, 2)
                [[0, 0, 1],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 1, -4],
                 [0, 0, 1],
                 [0, 0, 0]],
    
                [[0, 0, 1],
                 [0, 0, 0],
                 [0, 0, 0]],
            ],
            #===================================================================
            [  # (i, j, k) = (1, 1, 0)
                [[0, 0, 0],
                 [1, 0, 0],
                 [0, 0, 0]],

                [[1, 0, 0],
                 [-5, 1, 0],
                 [1, 0, 0]],
    
                [[0, 0, 0],
                 [1, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (1, 1, 1)
                [[0, 0, 0],
                 [0, 1, 0],
                 [0, 0, 0]],

                [[0, 1, 0],
                 [1, -6, 1],
                 [0, 1, 0]],
    
                [[0, 0, 0],
                 [0, 1, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (1, 1, 2)
                [[0, 0, 0],
                 [0, 0, 1],
                 [0, 0, 0]],

                [[0, 0, 1],
                 [0, 1, -5],
                 [0, 0, 1]],
    
                [[0, 0, 0],
                 [0, 0, 1],
                 [0, 0, 0]],
            ],
            #===================================================================
            [  # (i, j, k) = (1, 2, 0)
                [[0, 0, 0],
                 [0, 0, 0],
                 [1, 0, 0]],

                [[0, 0, 0],
                 [1, 0, 0],
                 [-4, 1, 0]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [1, 0, 0]],
            ],
            [  # (i, j, k) = (1, 2, 1)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 1, 0]],

                [[0, 0, 0],
                 [0, 1, 0],
                 [1, -5, 1]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 1, 0]],
            ],
            [  # (i, j, k) = (1, 2, 2)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 1]],

                [[0, 0, 0],
                 [0, 0, 1],
                 [0, 1, -4]],
    
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 1]],
            ],
            #===================================================================
            #===================================================================
            [  # (i, j, k) = (2, 0, 0)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[1, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
    
                [[-3, 1, 0],
                 [1, 0, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (2, 0, 1)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 1, 0],
                 [0, 0, 0],
                 [0, 0, 0]],
    
                [[1, -4, 1],
                 [0, 1, 0],
                 [0, 0, 0]],
            ],
            [  # (i, j, k) = (2, 0, 2)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 1],
                 [0, 0, 0],
                 [0, 0, 0]],
    
                [[0, 1, -3],
                 [0, 0, 1],
                 [0, 0, 0]],
            ],
            #===================================================================
            [  # (i, j, k) = (2, 1, 0)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 0],
                 [1, 0, 0],
                 [0, 0, 0]],
    
                [[1, 0, 0],
                 [-4, 1, 0],
                 [1, 0, 0]],
            ],
            [  # (i, j, k) = (2, 1, 1)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 0],
                 [0, 1, 0],
                 [0, 0, 0]],
    
                [[0, 1, 0],
                 [1, -5, 1],
                 [0, 1, 0]],
            ],
            [  # (i, j, k) = (2, 1, 2)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 0],
                 [0, 0, 1],
                 [0, 0, 0]],
    
                [[0, 0, 1],
                 [0, 1, -4],
                 [0, 0, 1]],
            ],
            #===================================================================
            [  # (i, j, k) = (2, 2, 0)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 0],
                 [0, 0, 0],
                 [1, 0, 0]],
    
                [[0, 0, 0],
                 [1, 0, 0],
                 [-3, 1, 0]],
            ],
            [  # (i, j, k) = (2, 2, 1)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 1, 0]],
    
                [[0, 0, 0],
                 [0, 1, 0],
                 [1, -4, 1]],
            ],
            [  # (i, j, k) = (2, 2, 2)
                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0]],

                [[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 1]],
    
                [[0, 0, 0],
                 [0, 0, 1],
                 [0, 1, -3]],
            ],
            ])
        assert np.all(m == ref)

    def test_combine_regularizer_matrices(self):
        m1 = np.array([[0, 1, 2],
                      [3, 4, 5],
                      [6, 7, 8],
                      [9, 10, 11]])
        m2 = np.array([[12, 13, 14, 15, 16]])
        m3 = np.array([[17]])
        m4 = np.array([[18, 19],
                       [20, 21]])
        matrix = combine_regularizer_matrices([m1, m2, m3, m4])
        ref = np.array([
            [0,  1,  2,  0,  0,  0,  0,  0,  0,  0,  0],
            [3,  4,  5,  0,  0,  0,  0,  0,  0,  0,  0],
            [6,  7,  8,  0,  0,  0,  0,  0,  0,  0,  0],
            [9, 10, 11,  0,  0,  0,  0,  0,  0,  0,  0],
            [0,  0,  0, 12, 13, 14, 15, 16,  0,  0,  0],
            [0,  0,  0,  0,  0,  0,  0,  0, 17,  0,  0],
            [0,  0,  0,  0,  0,  0,  0,  0,  0, 18, 19],
            [0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 21],
        ])
        assert np.all(matrix == ref)
